# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import mlserver_pb2 as mlserver__pb2


class MessagerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Test = channel.unary_unary(
                '/Messager/Test',
                request_serializer=mlserver__pb2.VoidMsg.SerializeToString,
                response_deserializer=mlserver__pb2.VoidMsg.FromString,
                )
        self.AppendTrainingSample = channel.unary_unary(
                '/Messager/AppendTrainingSample',
                request_serializer=mlserver__pb2.MsgSample.SerializeToString,
                response_deserializer=mlserver__pb2.MsgError.FromString,
                )
        self.InitMlParams = channel.unary_unary(
                '/Messager/InitMlParams',
                request_serializer=mlserver__pb2.MsgInit.SerializeToString,
                response_deserializer=mlserver__pb2.MsgError.FromString,
                )
        self.Train = channel.unary_unary(
                '/Messager/Train',
                request_serializer=mlserver__pb2.VoidMsg.SerializeToString,
                response_deserializer=mlserver__pb2.VoidMsg.FromString,
                )
        self.AppendPredictSample = channel.unary_unary(
                '/Messager/AppendPredictSample',
                request_serializer=mlserver__pb2.MsgPredIn.SerializeToString,
                response_deserializer=mlserver__pb2.MsgError.FromString,
                )
        self.Predict = channel.unary_unary(
                '/Messager/Predict',
                request_serializer=mlserver__pb2.VoidMsg.SerializeToString,
                response_deserializer=mlserver__pb2.MsgPredOut.FromString,
                )


class MessagerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Test(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AppendTrainingSample(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def InitMlParams(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Train(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AppendPredictSample(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Predict(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MessagerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Test': grpc.unary_unary_rpc_method_handler(
                    servicer.Test,
                    request_deserializer=mlserver__pb2.VoidMsg.FromString,
                    response_serializer=mlserver__pb2.VoidMsg.SerializeToString,
            ),
            'AppendTrainingSample': grpc.unary_unary_rpc_method_handler(
                    servicer.AppendTrainingSample,
                    request_deserializer=mlserver__pb2.MsgSample.FromString,
                    response_serializer=mlserver__pb2.MsgError.SerializeToString,
            ),
            'InitMlParams': grpc.unary_unary_rpc_method_handler(
                    servicer.InitMlParams,
                    request_deserializer=mlserver__pb2.MsgInit.FromString,
                    response_serializer=mlserver__pb2.MsgError.SerializeToString,
            ),
            'Train': grpc.unary_unary_rpc_method_handler(
                    servicer.Train,
                    request_deserializer=mlserver__pb2.VoidMsg.FromString,
                    response_serializer=mlserver__pb2.VoidMsg.SerializeToString,
            ),
            'AppendPredictSample': grpc.unary_unary_rpc_method_handler(
                    servicer.AppendPredictSample,
                    request_deserializer=mlserver__pb2.MsgPredIn.FromString,
                    response_serializer=mlserver__pb2.MsgError.SerializeToString,
            ),
            'Predict': grpc.unary_unary_rpc_method_handler(
                    servicer.Predict,
                    request_deserializer=mlserver__pb2.VoidMsg.FromString,
                    response_serializer=mlserver__pb2.MsgPredOut.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Messager', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Messager(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Test(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Messager/Test',
            mlserver__pb2.VoidMsg.SerializeToString,
            mlserver__pb2.VoidMsg.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AppendTrainingSample(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Messager/AppendTrainingSample',
            mlserver__pb2.MsgSample.SerializeToString,
            mlserver__pb2.MsgError.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def InitMlParams(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Messager/InitMlParams',
            mlserver__pb2.MsgInit.SerializeToString,
            mlserver__pb2.MsgError.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Train(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Messager/Train',
            mlserver__pb2.VoidMsg.SerializeToString,
            mlserver__pb2.VoidMsg.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AppendPredictSample(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Messager/AppendPredictSample',
            mlserver__pb2.MsgPredIn.SerializeToString,
            mlserver__pb2.MsgError.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Predict(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Messager/Predict',
            mlserver__pb2.VoidMsg.SerializeToString,
            mlserver__pb2.MsgPredOut.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
